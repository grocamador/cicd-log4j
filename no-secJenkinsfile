pipeline {
    agent any
    environment {
        DOCKER_REGISTRY_NAME = "517716713836.dkr.ecr.eu-central-1.amazonaws.com"
        DOCKER_IMAGE_NAME = "cicd-log4j"
        CS_REGISTRY= "registry.crowdstrike.com"
        CS_IMAGE_NAME="registry.crowdstrike.com/fcs/us-1/release/cs-fcs"
        CS_IMAGE_TAG="0.42.0"
        FALCON_REGION="us-1"
        PROJECT_PATH="git::https://github.com/grocamador/cicd-log4j.git//kubernetes"
     // DOCKERHUB_CREDENTIALS= credentials('dockerhubcredentials')

        }

stages {

    stage('Compile') {
            steps {
                dir('vulnerable-application') {
                    sh 'mvn clean package'
                }
            }
        }

    
    stage('Build Docker Image') {

        steps {
                echo 'Building docker image'
                sh "docker build -t ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} ."
            }
        }


    stage('Push Docker Image to ECR') {
      
        steps {

                echo "Login on ECR"
                sh "aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 517716713836.dkr.ecr.eu-central-1.amazonaws.com"       		
	            echo 'Login Completed' 
                echo "Pushing docker image to ECR with current build tag"
                sh " docker tag ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} ${DOCKER_REGISTRY_NAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
                sh " docker push ${DOCKER_REGISTRY_NAME}/${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER}"
                echo 'Pushing docker image with tag latest'
                sh "docker tag ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} ${DOCKER_REGISTRY_NAME}/${DOCKER_IMAGE_NAME}:latest"
                sh "docker push ${DOCKER_REGISTRY_NAME}/${DOCKER_IMAGE_NAME}:latest"
            }
        }
        
    

       stage("Deploy to Pre"){

             steps {              

              sh ("""
                  kubectl rollout restart -f kubernetes/preprod-deployment-log4j.yaml
                """)
                
             }
         }


       stage("Deploy to Production"){

             steps {
                              
                    // Create an Approval Button with a timeout of 15minutes.
	                timeout(time: 15, unit: "MINUTES") {
	                    input message: 'Do you want to approve the deployment?', ok: 'Yes'
	                }
              sh ("""
                  kubectl rollout restart -f kubernetes/deployment-log4j.yaml
                """)
                
             }
         }
    
    }

}
